Template Input Data file for Frame3DD - 3D structural frame analysis (N,mm,ton)

# this template indicates units of Newton, millimeter, and tonne
# other units may be specified as desired      


# node data ...

nN                        # number of nodes
#.node       X-coord  Y-coord  Z-coord  radius 
#                mm       mm       mm      mm
  N[1]           x[1]     y[1]     z[1]    rj[1]    
    :              :        :        :       :  
  N[nN]          x[nN]    y[nN]    z[nN]   rj[nN]


# reaction data ...

nR                           # number of nodes with reactions
#.node    X      Y      Z       XX      YY      ZZ       0:free, 1:fixed
  N[1]    Rx[1]  Ry[1]  Rz[1]   Rxx[1]  Ryy[1]  Rzz[1]
    :        :      :      :        :       :       :          
  N[nR]   Rx[nR] Ry[nR] Rz[nR]  Rxx[nR] Ryy[nR] Rzz[nR]


# frame element data ...

nE                        # number of frame elements 

#.elmnt j1     j2    Ax     Asy     Asz     Jx     Iy     Iz     E     G     roll  density
#       .      .     mm^2   mm^2    mm^2    mm^4   mm^4   mm^4   MPa   MPa   deg   tonne/mm^3
EL[1]  N1[1]  N2[1]  Ax[1]  Asy[1]  Asz[1]  Jx[1]  Iy[1]  Iz[1]  E[1]  G[1]  p[1]  d[1]
   :      :      :      :       :       :      :      :      :     :     :     :     :
EL[nE] N1[nE] N2[nE] Ax[nE] Asy[nE] Asz[nE] Jx[nE] Iy[nE] Iz[nE] E[nE] G[nE] p[nE] d[nE]

shear        # 1=Do, 0=Don't include shear deformation effects
geom         # 1=Do, 0=Don't include geometric stiffness effects
exagg_static # exaggeration factor for static mesh deformations
scale        # zoom scale for 3D plotting
dx           # length of x-axis increment for frame element internal force data, mm
             # if dx is -1 then internal force calculations are skipped


# load data ...

nL                        # number of static load cases,  1..30

# Begin Static Load Case 1  

# gravitational acceleration for self-weight loading, mm/s^2 (global)
#   gX         gY         gZ
#   mm/s^2     mm/s^2     mm/s^2
    gX         gY         gZ   

nF                   # number of loaded nodes (global)
#.node  X-load   Y-load   Z-load   X-mom     Y-mom     Z-mom
#         N        N        N        N.mm      N.mm      N.mm
  N[1]    Fx[1]    Fy[1]    Fz[1]    Mxx[1]    Myy[1]    Mzz[1]
    :        :        :        :         :         :         :  
  N[nF]   Fx[nF]   Fy[nF]   Fz[nF]   Mxx[nF]   Myy[nF]   Mzz[nF]

nU                   # number of uniformly-distributed element loads (local)
#.elmnt  X-load   Y-load   Z-load   uniform member loads in member coordinates
#         N/mm     N/mm     N/mm
 EL[1]    Ux[1]    Uy[1]    Uz[1]
    :        :        :        :  
 EL[nU]   Ux[nU]   Uy[nU]   Uz[nU]

nW                   # number of trapezoidally-distributed element loads (local)
#       start    stop     start    stop
#.elmnt loc'n    loc'n    load     load
#       mm       mm       N/mm     N/mm
 EL[1]  xx1[1]   xx2[2]   wx1[1]   wx2[1]  # locations and loads - local x-axis
        xy1[1]   xy2[2]   wy1[1]   wy2[1]  # locations and loads - local y-axis
        xz1[1]   xz2[2]   wz1[1]   wz2[1]  # locations and loads - local z-axis
    :       :        :        :        :
 EL[nW] xx1[nW]  xx2[nW]  wx1[nW]  wx2[nW] # x1 and x2: start and end locations
        xy1[nW]  xy2[nW]  wy1[nW]  wy2[nW] # w1 and w2: start load and end load
        xz1[nW]  xz2[nW]  wz1[nW]  wz2[nW] # 0 < x1 < x2 < L

nP                   # number of concentrated interior point loads (local)
#.elmnt  X-load   Y-load   Z-load    x-loc'n  point loads in member coordinates 
 EL[1]    Px[1]    Py[1]    Pz[1]    x[1]      
    :        :        :        :       :    # x=distance from coordinate N1 
 EL[nP]   Px[nP]   Py[nP]   Pz[nP]   x[nP]  # 0 < x < L

nT                   # number of frame elements with temperature changes (local)
#.elmnt   coef.  y-depth  z-depth  deltaTy+  deltaTy-  deltaTz+  deltaTz-
#         /deg.C  mm       mm       deg.C     deg.C     deg.C     deg.C
 EL[1]    a[1]    hy[1]    hz[1]    Ty+[1]    Ty-[1]    Tz+[1]    Tz-[1] 
    :       :        :        :         :         :         :         :   
 EL[nT]   a[nT]   hy[nT]   hz[nT]   Ty+[nT]   Ty-[nT]   Tz+[nT]   Tz-[nT] 

nD                   # number of prescribed displacements nD<=nR (global)
#.node   X-displ  Y-displ  Z-displ  X-rot'n   Y-rot'n   Z-rot'n
#         mm       mm       mm       radian    radian    radian
  N[1]    Dx[1]    Dy[1]    Dz[3]    Dxx[1]    Dyy[1]    Dzz[1]
    :        :        :        :         :         :         : 
  N[nD]   Dx[nD]   Dy[nD]   Dz[nD]   Dxx[nD]   Dyy[nD]   Dzz[nD]

# End Static Load Case 1

# Begin Static Load Case 2

# gravitational acceleration for self-weight loading, mm/s^2 (global)
#   gX         gY         gZ
#   mm/s^2     mm/s^2     mm/s^2
    gX         gY         gZ   

nF                   # number of loaded nodes (global)
#.node  X-load   Y-load   Z-load   X-mom     Y-mom     Z-mom
#         N        N        N        N.mm      N.mm      N.mm
  N[1]    Fx[1]    Fy[1]    Fz[1]    Mxx[1]    Myy[1]    Mzz[1]
    :        :        :        :         :         :         :  
  N[nF]   Fx[nF]   Fy[nF]   Fz[nF]   Mxx[nF]   Myy[nF]   Mzz[nF]

nU                   # number of uniformly-distributed element loads (local)
#.elmnt  X-load   Y-load   Z-load   uniform member loads in member coordinates
#         N/mm     N/mm     N/mm
 EL[1]    Ux[1]    Uy[1]    Uz[1]
    :        :        :        :  
 EL[nU]   Ux[nU]   Uy[nU]   Uz[nU]

nW                   # number of trapezoidally-distributed element loads (local)
#       start    stop     start    stop
#.elmnt loc'n    loc'n    load     load
#       mm       mm       N/mm     N/mm
 EL[1]  xx1[1]   xx2[2]   wx1[1]   wx2[1]  # locations and loads - local x-axis
        xy1[1]   xy2[2]   wy1[1]   wy2[1]  # locations and loads - local y-axis
        xz1[1]   xz2[2]   wz1[1]   wz2[1]  # locations and loads - local z-axis
    :       :        :        :        :
 EL[nW] xx1[nW]  xx2[nW]  wx1[nW]  wx2[nW] # x1 and x2: start and end locations
        xy1[nW]  xy2[nW]  wy1[nW]  wy2[nW] # w1 and w2: start load and end load
        xz1[nW]  xz2[nW]  wz1[nW]  wz2[nW] # 0 < x1 < x2 < L

nP                   # number of concentrated interior point loads (local)
#.elmnt  X-load   Y-load   Z-load    x-loc'n  point loads in member coordinates 
 EL[1]    Px[1]    Py[1]    Pz[1]    x[1]      
    :        :        :        :       :    # x=distance from coordinate N1 
 EL[nP]   Px[nP]   Py[nP]   Pz[nP]   x[nP]  # 0 < x < L

nT                   # number of frame elements with temperature changes (local)
#.elmnt   coef.  y-depth  z-depth  deltaTy+  deltaTy-  deltaTz+  deltaTz-
#         /deg.C  mm       mm       deg.C     deg.C     deg.C     deg.C
 EL[1]    a[1]    hy[1]    hz[1]    Ty+[1]    Ty-[1]    Tz+[1]    Tz-[1] 
    :       :        :        :         :         :         :         :   
 EL[nT]   a[nT]   hy[nT]   hz[nT]   Ty+[nT]   Ty-[nT]   Tz+[nT]   Tz-[nT] 

nD                   # number of prescribed displacements nD<=nR (global)
#.node   X-displ  Y-displ  Z-displ  X-rot'n   Y-rot'n   Z-rot'n
#         mm       mm       mm       radian    radian    radian
  N[1]    Dx[1]    Dy[1]    Dz[3]    Dxx[1]    Dyy[1]    Dzz[1]
    :        :        :        :         :         :         : 
  N[nD]   Dx[nD]   Dy[nD]   Dz[nD]   Dxx[nD]   Dyy[nD]   Dzz[nD]

# End Static Load Case 2

# repeat up to 30 static load cases


# dynamic analysis data ...

nM      # number of desired dynamic modes 

# if nM is set to 0 (zero) the remaining Input Data may be omitted

Mmethod # 1= Subspace-Nacobi iteration, 2= Stodola (matrix iteration) method
lump    # 0= consistent mass matrix, 1= lumped mass matrix
tol     # frequency convergence tolerance  approx 1e-4
shift   # frequency shift-factor for rigid body modes, make 0 for pos.def. [K]
exagg_modal  # exaggerate modal mesh deformations


# extra node inertia data ...
nI      # number of nodes with extra node mass or rotatory inertia
#.node  mass      XX-inertia   YY-inertia   ZZ-inertia
#       tonne     tonne.mm^2   tonne.mm^2   tonne.mm^2
 N[1]   NMs[1]    NMx[1]       NMy[1]       NMz[1]  
   :        :         :            :            :    # (global coordinates)
 N[nI]  NMs[nI]   NMx[nI]      NMy[nI]      NMz[nI]


# extra frame element mass data ...
nX      # number of frame elements with extra mass 
#.elmnt   extra mass
#         tonne
 EL[1]    EMs[1]
    :         :   
 EL[nX]   EMs[nE]


# mode shape animation data ...
nA                        # number of modes to be animated, nA
# list of modes to be animated, sorted in increasing order 
 anim[0] ... anim[nA]     # this list should be omitted if nA == 0
pan                       # pan rate of the animation 0 = no panning

# matrix condensation data ...

Cmethod # matrix condensation method ...  0=none, 1=static, 2=Guyan, 3=dynamic
nC      # number of condensed nodes
#.node  X      Y      Z       XX      YY     ZZ   1: condense; 0: don't
 N[1]  cx[1]  cy[1]  cz[1]   cxx[1]  cyy[1] czz[1]
   :      :      :      :        :       :       :    
 N[nC] cx[nC] cy[nC] cz[nC]  cxx[nC] cyy[nC] czz[nC]

  m[1]   m[2]   m[3]  ...      # list of modes matched in dynamic condensation
                               # if Cmethod == 1, only mode m[1] is matched.
                               
